syntax = "proto3";

package vvk.server;

import "vvk_types.proto";

enum VvkStreamType {
  VVK_STREAM_TYPE_UNCOMPRESSED = 0;
  VVK_STREAM_TYPE_H264 = 1;
  VVK_STREAM_TYPE_H265 = 2;
}

message VvkGetFrameStreamingCapabilitiesRequest {
  uint64 physical_device = 1;
}

message StreamingCapabilities {
  bool supports_uncompressed_stream = 1;
  bool supports_h264_stream = 2;
  bool supports_h265_stream = 3;
}

message UncompressedStreamCreateInfo {
  uint32 queue_family_index = 1;
}

message H264StreamCreateInfo {
  uint32 video_queue_family_index = 1;
  uint32 compute_queue_family_index = 2;
  VkFormat remote_images_format = 3;
  uint64 encode_wait_semaphore = 4;
}

message UncompressedStreamInfo {
  repeated uint64 remote_buffers = 1;
}

message H264StreamInfo {
  bytes header = 1;
  VkExtent2D remote_images_size = 2;
}

message VvkSetupPresentationRequest {
  uint64 instance = 1;
  uint64 device = 2;
  repeated uint64 remote_images = 3;
  uint32 width = 4;
  uint32 height = 5;
  oneof stream_create_info {
    UncompressedStreamCreateInfo uncompressed_stream_create_info = 6;
    H264StreamCreateInfo h264_stream_create_info = 7;
  }
}

message VvkSetupPresentationResponse {
  oneof stream_info {
    UncompressedStreamInfo uncompressed_stream_info = 1;
    H264StreamInfo h264_stream_info = 2;
  }
  uint64 session_key = 3;
  repeated uint64 frame_keys = 4;
}

message VvkSetupFrameRequest {
  uint64 session_key = 1;
  uint64 frame_key = 2;
  uint64 command_buffer = 3;
}

message VvkGetFrameRequest {
  uint64 session_key = 1;
  uint64 frame_key = 2;
  VvkStreamType stream_type = 3;
}

message VvkGetFrameResponse {
  bytes frame_data = 1;
}