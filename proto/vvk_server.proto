// GENERATED FILE - DO NOT EDIT
// clang-format off
syntax = "proto3";

package vvk.server;

import "vvk_types.proto";

service VvkServer {
  // We will use a single bidirection streaming RPC to call all the Vulkan functions
  // This is because we must guarantee that the order of the calls is the same as the order of the calls in the Vulkan API
  rpc CallMethods (stream VvkRequest) returns (stream VvkResponse) {}
}

message VvkRequest {
  string method = 1;
  oneof params {
    VkCreateInstanceParams vkCreateInstance = 2;
    VkDestroyInstanceParams vkDestroyInstance = 3;
    VkEnumeratePhysicalDevicesParams vkEnumeratePhysicalDevices = 4;
    VkGetPhysicalDevicePropertiesParams vkGetPhysicalDeviceProperties = 5;
    VkGetPhysicalDeviceMemoryPropertiesParams vkGetPhysicalDeviceMemoryProperties = 6;
    VkCreateDeviceParams vkCreateDevice = 7;
    VkDestroyDeviceParams vkDestroyDevice = 8;
    VkEnumerateInstanceExtensionPropertiesParams vkEnumerateInstanceExtensionProperties = 9;
    VkEnumerateDeviceExtensionPropertiesParams vkEnumerateDeviceExtensionProperties = 10;
  }
}

message VvkResponse {
  uint32 result = 1;
  oneof response {
    VkCreateInstanceResponse vkCreateInstance = 2;
    VkEnumeratePhysicalDevicesResponse vkEnumeratePhysicalDevices = 3;
    VkGetPhysicalDevicePropertiesResponse vkGetPhysicalDeviceProperties = 4;
    VkGetPhysicalDeviceMemoryPropertiesResponse vkGetPhysicalDeviceMemoryProperties = 5;
    VkCreateDeviceResponse vkCreateDevice = 6;
    VkEnumerateInstanceExtensionPropertiesResponse vkEnumerateInstanceExtensionProperties = 7;
    VkEnumerateDeviceExtensionPropertiesResponse vkEnumerateDeviceExtensionProperties = 8;
  }
}

message VkCreateInstanceResponse {
  uint64 pInstance = 1; // VkInstance* pInstance
}

message VkCreateInstanceParams {
  VkInstanceCreateInfo pCreateInfo = 1; // const VkInstanceCreateInfo* pCreateInfo
  optional VkAllocationCallbacks pAllocator = 2; // const VkAllocationCallbacks* pAllocator
  uint64 pInstance = 3; // VkInstance* pInstance NON-CONST POINTER
}

message VkDestroyInstanceParams {
  optional uint64 instance = 1; // VkInstance instance
  optional VkAllocationCallbacks pAllocator = 2; // const VkAllocationCallbacks* pAllocator
}

message VkEnumeratePhysicalDevicesResponse {
  uint32 pPhysicalDeviceCount = 1; // uint32_t* pPhysicalDeviceCount
  repeated uint64 pPhysicalDevices = 2; // VkPhysicalDevice* pPhysicalDevices NON-CONST POINTER
}

message VkEnumeratePhysicalDevicesParams {
  uint64 instance = 1; // VkInstance instance
  uint32 pPhysicalDeviceCount = 2; // uint32_t* pPhysicalDeviceCount NON-CONST POINTER
  repeated uint64 pPhysicalDevices = 3; // VkPhysicalDevice* pPhysicalDevices NON-CONST POINTER
}

message VkGetPhysicalDevicePropertiesResponse {
  VkPhysicalDeviceProperties pProperties = 1; // VkPhysicalDeviceProperties* pProperties
}

message VkGetPhysicalDevicePropertiesParams {
  uint64 physicalDevice = 1; // VkPhysicalDevice physicalDevice
  VkPhysicalDeviceProperties pProperties = 2; // VkPhysicalDeviceProperties* pProperties NON-CONST POINTER
}

message VkGetPhysicalDeviceMemoryPropertiesResponse {
  VkPhysicalDeviceMemoryProperties pMemoryProperties = 1; // VkPhysicalDeviceMemoryProperties* pMemoryProperties
}

message VkGetPhysicalDeviceMemoryPropertiesParams {
  uint64 physicalDevice = 1; // VkPhysicalDevice physicalDevice
  VkPhysicalDeviceMemoryProperties pMemoryProperties = 2; // VkPhysicalDeviceMemoryProperties* pMemoryProperties NON-CONST POINTER
}

message VkCreateDeviceResponse {
  uint64 pDevice = 1; // VkDevice* pDevice
}

message VkCreateDeviceParams {
  uint64 physicalDevice = 1; // VkPhysicalDevice physicalDevice
  VkDeviceCreateInfo pCreateInfo = 2; // const VkDeviceCreateInfo* pCreateInfo
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
  uint64 pDevice = 4; // VkDevice* pDevice NON-CONST POINTER
}

message VkDestroyDeviceParams {
  optional uint64 device = 1; // VkDevice device
  optional VkAllocationCallbacks pAllocator = 2; // const VkAllocationCallbacks* pAllocator
}

message VkEnumerateInstanceExtensionPropertiesResponse {
  uint32 pPropertyCount = 1; // uint32_t* pPropertyCount
  repeated VkExtensionProperties pProperties = 2; // VkExtensionProperties* pProperties NON-CONST POINTER
}

message VkEnumerateInstanceExtensionPropertiesParams {
  optional string pLayerName = 1; // const char* pLayerName
  uint32 pPropertyCount = 2; // uint32_t* pPropertyCount NON-CONST POINTER
  repeated VkExtensionProperties pProperties = 3; // VkExtensionProperties* pProperties NON-CONST POINTER
}

message VkEnumerateDeviceExtensionPropertiesResponse {
  uint32 pPropertyCount = 1; // uint32_t* pPropertyCount
  repeated VkExtensionProperties pProperties = 2; // VkExtensionProperties* pProperties NON-CONST POINTER
}

message VkEnumerateDeviceExtensionPropertiesParams {
  uint64 physicalDevice = 1; // VkPhysicalDevice physicalDevice
  optional string pLayerName = 2; // const char* pLayerName
  uint32 pPropertyCount = 3; // uint32_t* pPropertyCount NON-CONST POINTER
  repeated VkExtensionProperties pProperties = 4; // VkExtensionProperties* pProperties NON-CONST POINTER
}


