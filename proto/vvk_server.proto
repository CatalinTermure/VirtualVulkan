// GENERATED FILE - DO NOT EDIT
// clang-format off
syntax = "proto3";

package vvk.server;

import "vvk_types.proto";

service VvkServer {
  // We will use a single bidirection streaming RPC to call all the Vulkan functions
  // This is because we must guarantee that the order of the calls is the same as the order of the calls in the Vulkan API
  rpc CallMethods (stream VvkRequest) returns (stream VvkResponse) {}
}

message VvkRequest {
  string method = 1;
  oneof params {
    VkCreateInstanceParams vkCreateInstance = 2;
    VkDestroyInstanceParams vkDestroyInstance = 3;
    VkEnumeratePhysicalDevicesParams vkEnumeratePhysicalDevices = 4;
    VkGetPhysicalDeviceFeaturesParams vkGetPhysicalDeviceFeatures = 5;
    VkGetPhysicalDeviceFormatPropertiesParams vkGetPhysicalDeviceFormatProperties = 6;
    VkGetPhysicalDevicePropertiesParams vkGetPhysicalDeviceProperties = 7;
    VkGetPhysicalDeviceQueueFamilyPropertiesParams vkGetPhysicalDeviceQueueFamilyProperties = 8;
    VkGetPhysicalDeviceMemoryPropertiesParams vkGetPhysicalDeviceMemoryProperties = 9;
    VkCreateDeviceParams vkCreateDevice = 10;
    VkDestroyDeviceParams vkDestroyDevice = 11;
    VkEnumerateInstanceExtensionPropertiesParams vkEnumerateInstanceExtensionProperties = 12;
    VkEnumerateDeviceExtensionPropertiesParams vkEnumerateDeviceExtensionProperties = 13;
    VkGetDeviceQueueParams vkGetDeviceQueue = 14;
    VkAllocateMemoryParams vkAllocateMemory = 15;
    VkFreeMemoryParams vkFreeMemory = 16;
    VkBindImageMemoryParams vkBindImageMemory = 17;
    VkGetImageMemoryRequirementsParams vkGetImageMemoryRequirements = 18;
    VkCreateFenceParams vkCreateFence = 19;
    VkDestroyFenceParams vkDestroyFence = 20;
    VkResetFencesParams vkResetFences = 21;
    VkWaitForFencesParams vkWaitForFences = 22;
    VkCreateSemaphoreParams vkCreateSemaphore = 23;
    VkDestroySemaphoreParams vkDestroySemaphore = 24;
    VkCreateImageParams vkCreateImage = 25;
    VkDestroyImageParams vkDestroyImage = 26;
    VkGetImageSubresourceLayoutParams vkGetImageSubresourceLayout = 27;
    VkCreateImageViewParams vkCreateImageView = 28;
    VkDestroyImageViewParams vkDestroyImageView = 29;
    VkCreateShaderModuleParams vkCreateShaderModule = 30;
    VkDestroyShaderModuleParams vkDestroyShaderModule = 31;
    VkCreateGraphicsPipelinesParams vkCreateGraphicsPipelines = 32;
    VkDestroyPipelineParams vkDestroyPipeline = 33;
    VkCreatePipelineLayoutParams vkCreatePipelineLayout = 34;
    VkDestroyPipelineLayoutParams vkDestroyPipelineLayout = 35;
    VkCreateFramebufferParams vkCreateFramebuffer = 36;
    VkDestroyFramebufferParams vkDestroyFramebuffer = 37;
    VkCreateRenderPassParams vkCreateRenderPass = 38;
    VkDestroyRenderPassParams vkDestroyRenderPass = 39;
    VkCreateCommandPoolParams vkCreateCommandPool = 40;
    VkDestroyCommandPoolParams vkDestroyCommandPool = 41;
    VkResetCommandPoolParams vkResetCommandPool = 42;
    VkAllocateCommandBuffersParams vkAllocateCommandBuffers = 43;
    VkFreeCommandBuffersParams vkFreeCommandBuffers = 44;
    VkBeginCommandBufferParams vkBeginCommandBuffer = 45;
    VkEndCommandBufferParams vkEndCommandBuffer = 46;
    VkCmdBindPipelineParams vkCmdBindPipeline = 47;
    VkCmdBeginRenderPassParams vkCmdBeginRenderPass = 48;
    VkCmdEndRenderPassParams vkCmdEndRenderPass = 49;
    VkBindImageMemory2Params vkBindImageMemory2 = 50;
    VkGetImageMemoryRequirements2Params vkGetImageMemoryRequirements2 = 51;
  }
}

message VvkResponse {
  uint32 result = 1;
  oneof response {
    VkCreateInstanceResponse vkCreateInstance = 2;
    VkEnumeratePhysicalDevicesResponse vkEnumeratePhysicalDevices = 3;
    VkGetPhysicalDeviceFeaturesResponse vkGetPhysicalDeviceFeatures = 4;
    VkGetPhysicalDeviceFormatPropertiesResponse vkGetPhysicalDeviceFormatProperties = 5;
    VkGetPhysicalDevicePropertiesResponse vkGetPhysicalDeviceProperties = 6;
    VkGetPhysicalDeviceQueueFamilyPropertiesResponse vkGetPhysicalDeviceQueueFamilyProperties = 7;
    VkGetPhysicalDeviceMemoryPropertiesResponse vkGetPhysicalDeviceMemoryProperties = 8;
    VkCreateDeviceResponse vkCreateDevice = 9;
    VkEnumerateInstanceExtensionPropertiesResponse vkEnumerateInstanceExtensionProperties = 10;
    VkEnumerateDeviceExtensionPropertiesResponse vkEnumerateDeviceExtensionProperties = 11;
    VkGetDeviceQueueResponse vkGetDeviceQueue = 12;
    VkAllocateMemoryResponse vkAllocateMemory = 13;
    VkGetImageMemoryRequirementsResponse vkGetImageMemoryRequirements = 14;
    VkCreateFenceResponse vkCreateFence = 15;
    VkCreateSemaphoreResponse vkCreateSemaphore = 16;
    VkCreateImageResponse vkCreateImage = 17;
    VkGetImageSubresourceLayoutResponse vkGetImageSubresourceLayout = 18;
    VkCreateImageViewResponse vkCreateImageView = 19;
    VkCreateShaderModuleResponse vkCreateShaderModule = 20;
    VkCreateGraphicsPipelinesResponse vkCreateGraphicsPipelines = 21;
    VkCreatePipelineLayoutResponse vkCreatePipelineLayout = 22;
    VkCreateFramebufferResponse vkCreateFramebuffer = 23;
    VkCreateRenderPassResponse vkCreateRenderPass = 24;
    VkCreateCommandPoolResponse vkCreateCommandPool = 25;
    VkAllocateCommandBuffersResponse vkAllocateCommandBuffers = 26;
    VkGetImageMemoryRequirements2Response vkGetImageMemoryRequirements2 = 27;
  }
}

message VkCreateInstanceResponse {
  uint64 pInstance = 1; // VkInstance* pInstance
}

message VkCreateInstanceParams {
  VkInstanceCreateInfo pCreateInfo = 1; // const VkInstanceCreateInfo* pCreateInfo
  optional VkAllocationCallbacks pAllocator = 2; // const VkAllocationCallbacks* pAllocator
  uint64 pInstance = 3; // VkInstance* pInstance NON-CONST POINTER
}

message VkDestroyInstanceParams {
  optional uint64 instance = 1; // VkInstance instance
  optional VkAllocationCallbacks pAllocator = 2; // const VkAllocationCallbacks* pAllocator
}

message VkEnumeratePhysicalDevicesResponse {
  uint32 pPhysicalDeviceCount = 1; // uint32_t* pPhysicalDeviceCount
  repeated uint64 pPhysicalDevices = 2; // VkPhysicalDevice* pPhysicalDevices NON-CONST POINTER
}

message VkEnumeratePhysicalDevicesParams {
  uint64 instance = 1; // VkInstance instance
  uint32 pPhysicalDeviceCount = 2; // uint32_t* pPhysicalDeviceCount NON-CONST POINTER
  repeated uint64 pPhysicalDevices = 3; // VkPhysicalDevice* pPhysicalDevices NON-CONST POINTER
}

message VkGetPhysicalDeviceFeaturesResponse {
  VkPhysicalDeviceFeatures pFeatures = 1; // VkPhysicalDeviceFeatures* pFeatures
}

message VkGetPhysicalDeviceFeaturesParams {
  uint64 physicalDevice = 1; // VkPhysicalDevice physicalDevice
  VkPhysicalDeviceFeatures pFeatures = 2; // VkPhysicalDeviceFeatures* pFeatures NON-CONST POINTER
}

message VkGetPhysicalDeviceFormatPropertiesResponse {
  VkFormatProperties pFormatProperties = 1; // VkFormatProperties* pFormatProperties
}

message VkGetPhysicalDeviceFormatPropertiesParams {
  uint64 physicalDevice = 1; // VkPhysicalDevice physicalDevice
  VkFormat format = 2; // VkFormat format
  VkFormatProperties pFormatProperties = 3; // VkFormatProperties* pFormatProperties NON-CONST POINTER
}

message VkGetPhysicalDevicePropertiesResponse {
  VkPhysicalDeviceProperties pProperties = 1; // VkPhysicalDeviceProperties* pProperties
}

message VkGetPhysicalDevicePropertiesParams {
  uint64 physicalDevice = 1; // VkPhysicalDevice physicalDevice
  VkPhysicalDeviceProperties pProperties = 2; // VkPhysicalDeviceProperties* pProperties NON-CONST POINTER
}

message VkGetPhysicalDeviceQueueFamilyPropertiesResponse {
  uint32 pQueueFamilyPropertyCount = 1; // uint32_t* pQueueFamilyPropertyCount
  repeated VkQueueFamilyProperties pQueueFamilyProperties = 2; // VkQueueFamilyProperties* pQueueFamilyProperties NON-CONST POINTER
}

message VkGetPhysicalDeviceQueueFamilyPropertiesParams {
  uint64 physicalDevice = 1; // VkPhysicalDevice physicalDevice
  uint32 pQueueFamilyPropertyCount = 2; // uint32_t* pQueueFamilyPropertyCount NON-CONST POINTER
  repeated VkQueueFamilyProperties pQueueFamilyProperties = 3; // VkQueueFamilyProperties* pQueueFamilyProperties NON-CONST POINTER
}

message VkGetPhysicalDeviceMemoryPropertiesResponse {
  VkPhysicalDeviceMemoryProperties pMemoryProperties = 1; // VkPhysicalDeviceMemoryProperties* pMemoryProperties
}

message VkGetPhysicalDeviceMemoryPropertiesParams {
  uint64 physicalDevice = 1; // VkPhysicalDevice physicalDevice
  VkPhysicalDeviceMemoryProperties pMemoryProperties = 2; // VkPhysicalDeviceMemoryProperties* pMemoryProperties NON-CONST POINTER
}

message VkCreateDeviceResponse {
  uint64 pDevice = 1; // VkDevice* pDevice
}

message VkCreateDeviceParams {
  uint64 physicalDevice = 1; // VkPhysicalDevice physicalDevice
  VkDeviceCreateInfo pCreateInfo = 2; // const VkDeviceCreateInfo* pCreateInfo
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
  uint64 pDevice = 4; // VkDevice* pDevice NON-CONST POINTER
}

message VkDestroyDeviceParams {
  optional uint64 device = 1; // VkDevice device
  optional VkAllocationCallbacks pAllocator = 2; // const VkAllocationCallbacks* pAllocator
}

message VkEnumerateInstanceExtensionPropertiesResponse {
  uint32 pPropertyCount = 1; // uint32_t* pPropertyCount
  repeated VkExtensionProperties pProperties = 2; // VkExtensionProperties* pProperties NON-CONST POINTER
}

message VkEnumerateInstanceExtensionPropertiesParams {
  optional string pLayerName = 1; // const char* pLayerName
  uint32 pPropertyCount = 2; // uint32_t* pPropertyCount NON-CONST POINTER
  repeated VkExtensionProperties pProperties = 3; // VkExtensionProperties* pProperties NON-CONST POINTER
}

message VkEnumerateDeviceExtensionPropertiesResponse {
  uint32 pPropertyCount = 1; // uint32_t* pPropertyCount
  repeated VkExtensionProperties pProperties = 2; // VkExtensionProperties* pProperties NON-CONST POINTER
}

message VkEnumerateDeviceExtensionPropertiesParams {
  uint64 physicalDevice = 1; // VkPhysicalDevice physicalDevice
  optional string pLayerName = 2; // const char* pLayerName
  uint32 pPropertyCount = 3; // uint32_t* pPropertyCount NON-CONST POINTER
  repeated VkExtensionProperties pProperties = 4; // VkExtensionProperties* pProperties NON-CONST POINTER
}

message VkGetDeviceQueueResponse {
  uint64 pQueue = 1; // VkQueue* pQueue
}

message VkGetDeviceQueueParams {
  uint64 device = 1; // VkDevice device
  uint32 queueFamilyIndex = 2; // uint32_t queueFamilyIndex
  uint32 queueIndex = 3; // uint32_t queueIndex
  uint64 pQueue = 4; // VkQueue* pQueue NON-CONST POINTER
}

message VkAllocateMemoryResponse {
  uint64 pMemory = 1; // VkDeviceMemory* pMemory
}

message VkAllocateMemoryParams {
  uint64 device = 1; // VkDevice device
  VkMemoryAllocateInfo pAllocateInfo = 2; // const VkMemoryAllocateInfo* pAllocateInfo
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
  uint64 pMemory = 4; // VkDeviceMemory* pMemory NON-CONST POINTER
}

message VkFreeMemoryParams {
  uint64 device = 1; // VkDevice device
  optional uint64 memory = 2; // VkDeviceMemory memory
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
}

message VkBindImageMemoryParams {
  uint64 device = 1; // VkDevice device
  uint64 image = 2; // VkImage image
  uint64 memory = 3; // VkDeviceMemory memory
  uint64 memoryOffset = 4; // VkDeviceSize memoryOffset
}

message VkGetImageMemoryRequirementsResponse {
  VkMemoryRequirements pMemoryRequirements = 1; // VkMemoryRequirements* pMemoryRequirements
}

message VkGetImageMemoryRequirementsParams {
  uint64 device = 1; // VkDevice device
  uint64 image = 2; // VkImage image
  VkMemoryRequirements pMemoryRequirements = 3; // VkMemoryRequirements* pMemoryRequirements NON-CONST POINTER
}

message VkCreateFenceResponse {
  uint64 pFence = 1; // VkFence* pFence
}

message VkCreateFenceParams {
  uint64 device = 1; // VkDevice device
  VkFenceCreateInfo pCreateInfo = 2; // const VkFenceCreateInfo* pCreateInfo
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
  uint64 pFence = 4; // VkFence* pFence NON-CONST POINTER
}

message VkDestroyFenceParams {
  uint64 device = 1; // VkDevice device
  optional uint64 fence = 2; // VkFence fence
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
}

message VkResetFencesParams {
  uint64 device = 1; // VkDevice device
  uint32 fenceCount = 2; // uint32_t fenceCount
  repeated uint64 pFences = 3; // const VkFence* pFences
}

message VkWaitForFencesParams {
  uint64 device = 1; // VkDevice device
  uint32 fenceCount = 2; // uint32_t fenceCount
  repeated uint64 pFences = 3; // const VkFence* pFences
  bool waitAll = 4; // VkBool32 waitAll
  uint64 timeout = 5; // uint64_t timeout
}

message VkCreateSemaphoreResponse {
  uint64 pSemaphore = 1; // VkSemaphore* pSemaphore
}

message VkCreateSemaphoreParams {
  uint64 device = 1; // VkDevice device
  VkSemaphoreCreateInfo pCreateInfo = 2; // const VkSemaphoreCreateInfo* pCreateInfo
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
  uint64 pSemaphore = 4; // VkSemaphore* pSemaphore NON-CONST POINTER
}

message VkDestroySemaphoreParams {
  uint64 device = 1; // VkDevice device
  optional uint64 semaphore = 2; // VkSemaphore semaphore
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
}

message VkCreateImageResponse {
  uint64 pImage = 1; // VkImage* pImage
}

message VkCreateImageParams {
  uint64 device = 1; // VkDevice device
  VkImageCreateInfo pCreateInfo = 2; // const VkImageCreateInfo* pCreateInfo
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
  uint64 pImage = 4; // VkImage* pImage NON-CONST POINTER
}

message VkDestroyImageParams {
  uint64 device = 1; // VkDevice device
  optional uint64 image = 2; // VkImage image
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
}

message VkGetImageSubresourceLayoutResponse {
  VkSubresourceLayout pLayout = 1; // VkSubresourceLayout* pLayout
}

message VkGetImageSubresourceLayoutParams {
  uint64 device = 1; // VkDevice device
  uint64 image = 2; // VkImage image
  VkImageSubresource pSubresource = 3; // const VkImageSubresource* pSubresource
  VkSubresourceLayout pLayout = 4; // VkSubresourceLayout* pLayout NON-CONST POINTER
}

message VkCreateImageViewResponse {
  uint64 pView = 1; // VkImageView* pView
}

message VkCreateImageViewParams {
  uint64 device = 1; // VkDevice device
  VkImageViewCreateInfo pCreateInfo = 2; // const VkImageViewCreateInfo* pCreateInfo
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
  uint64 pView = 4; // VkImageView* pView NON-CONST POINTER
}

message VkDestroyImageViewParams {
  uint64 device = 1; // VkDevice device
  optional uint64 imageView = 2; // VkImageView imageView
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
}

message VkCreateShaderModuleResponse {
  uint64 pShaderModule = 1; // VkShaderModule* pShaderModule
}

message VkCreateShaderModuleParams {
  uint64 device = 1; // VkDevice device
  VkShaderModuleCreateInfo pCreateInfo = 2; // const VkShaderModuleCreateInfo* pCreateInfo
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
  uint64 pShaderModule = 4; // VkShaderModule* pShaderModule NON-CONST POINTER
}

message VkDestroyShaderModuleParams {
  uint64 device = 1; // VkDevice device
  optional uint64 shaderModule = 2; // VkShaderModule shaderModule
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
}

message VkCreateGraphicsPipelinesResponse {
  repeated uint64 pPipelines = 1; // VkPipeline* pPipelines NON-CONST POINTER
}

message VkCreateGraphicsPipelinesParams {
  uint64 device = 1; // VkDevice device
  optional uint64 pipelineCache = 2; // VkPipelineCache pipelineCache
  uint32 createInfoCount = 3; // uint32_t createInfoCount
  repeated VkGraphicsPipelineCreateInfo pCreateInfos = 4; // const VkGraphicsPipelineCreateInfo* pCreateInfos
  optional VkAllocationCallbacks pAllocator = 5; // const VkAllocationCallbacks* pAllocator
  repeated uint64 pPipelines = 6; // VkPipeline* pPipelines NON-CONST POINTER
}

message VkDestroyPipelineParams {
  uint64 device = 1; // VkDevice device
  optional uint64 pipeline = 2; // VkPipeline pipeline
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
}

message VkCreatePipelineLayoutResponse {
  uint64 pPipelineLayout = 1; // VkPipelineLayout* pPipelineLayout
}

message VkCreatePipelineLayoutParams {
  uint64 device = 1; // VkDevice device
  VkPipelineLayoutCreateInfo pCreateInfo = 2; // const VkPipelineLayoutCreateInfo* pCreateInfo
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
  uint64 pPipelineLayout = 4; // VkPipelineLayout* pPipelineLayout NON-CONST POINTER
}

message VkDestroyPipelineLayoutParams {
  uint64 device = 1; // VkDevice device
  optional uint64 pipelineLayout = 2; // VkPipelineLayout pipelineLayout
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
}

message VkCreateFramebufferResponse {
  uint64 pFramebuffer = 1; // VkFramebuffer* pFramebuffer
}

message VkCreateFramebufferParams {
  uint64 device = 1; // VkDevice device
  VkFramebufferCreateInfo pCreateInfo = 2; // const VkFramebufferCreateInfo* pCreateInfo
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
  uint64 pFramebuffer = 4; // VkFramebuffer* pFramebuffer NON-CONST POINTER
}

message VkDestroyFramebufferParams {
  uint64 device = 1; // VkDevice device
  optional uint64 framebuffer = 2; // VkFramebuffer framebuffer
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
}

message VkCreateRenderPassResponse {
  uint64 pRenderPass = 1; // VkRenderPass* pRenderPass
}

message VkCreateRenderPassParams {
  uint64 device = 1; // VkDevice device
  VkRenderPassCreateInfo pCreateInfo = 2; // const VkRenderPassCreateInfo* pCreateInfo
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
  uint64 pRenderPass = 4; // VkRenderPass* pRenderPass NON-CONST POINTER
}

message VkDestroyRenderPassParams {
  uint64 device = 1; // VkDevice device
  optional uint64 renderPass = 2; // VkRenderPass renderPass
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
}

message VkCreateCommandPoolResponse {
  uint64 pCommandPool = 1; // VkCommandPool* pCommandPool
}

message VkCreateCommandPoolParams {
  uint64 device = 1; // VkDevice device
  VkCommandPoolCreateInfo pCreateInfo = 2; // const VkCommandPoolCreateInfo* pCreateInfo
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
  uint64 pCommandPool = 4; // VkCommandPool* pCommandPool NON-CONST POINTER
}

message VkDestroyCommandPoolParams {
  uint64 device = 1; // VkDevice device
  optional uint64 commandPool = 2; // VkCommandPool commandPool
  optional VkAllocationCallbacks pAllocator = 3; // const VkAllocationCallbacks* pAllocator
}

message VkResetCommandPoolParams {
  uint64 device = 1; // VkDevice device
  uint64 commandPool = 2; // VkCommandPool commandPool
  optional uint32 flags = 3; // VkCommandPoolResetFlags flags
}

message VkAllocateCommandBuffersResponse {
  repeated uint64 pCommandBuffers = 1; // VkCommandBuffer* pCommandBuffers NON-CONST POINTER
}

message VkAllocateCommandBuffersParams {
  uint64 device = 1; // VkDevice device
  VkCommandBufferAllocateInfo pAllocateInfo = 2; // const VkCommandBufferAllocateInfo* pAllocateInfo
  repeated uint64 pCommandBuffers = 3; // VkCommandBuffer* pCommandBuffers NON-CONST POINTER
}

message VkFreeCommandBuffersParams {
  uint64 device = 1; // VkDevice device
  uint64 commandPool = 2; // VkCommandPool commandPool
  uint32 commandBufferCount = 3; // uint32_t commandBufferCount
  repeated uint64 pCommandBuffers = 4; // const VkCommandBuffer* pCommandBuffers
}

message VkBeginCommandBufferParams {
  uint64 commandBuffer = 1; // VkCommandBuffer commandBuffer
  VkCommandBufferBeginInfo pBeginInfo = 2; // const VkCommandBufferBeginInfo* pBeginInfo
}

message VkEndCommandBufferParams {
  uint64 commandBuffer = 1; // VkCommandBuffer commandBuffer
}

message VkCmdBindPipelineParams {
  uint64 commandBuffer = 1; // VkCommandBuffer commandBuffer
  VkPipelineBindPoint pipelineBindPoint = 2; // VkPipelineBindPoint pipelineBindPoint
  uint64 pipeline = 3; // VkPipeline pipeline
}

message VkCmdBeginRenderPassParams {
  uint64 commandBuffer = 1; // VkCommandBuffer commandBuffer
  VkRenderPassBeginInfo pRenderPassBegin = 2; // const VkRenderPassBeginInfo* pRenderPassBegin
  VkSubpassContents contents = 3; // VkSubpassContents contents
}

message VkCmdEndRenderPassParams {
  uint64 commandBuffer = 1; // VkCommandBuffer commandBuffer
}

message VkBindImageMemory2Params {
  uint64 device = 1; // VkDevice device
  uint32 bindInfoCount = 2; // uint32_t bindInfoCount
  repeated VkBindImageMemoryInfo pBindInfos = 3; // const VkBindImageMemoryInfo* pBindInfos
}

message VkGetImageMemoryRequirements2Response {
  VkMemoryRequirements2 pMemoryRequirements = 1; // VkMemoryRequirements2* pMemoryRequirements
}

message VkGetImageMemoryRequirements2Params {
  uint64 device = 1; // VkDevice device
  VkImageMemoryRequirementsInfo2 pInfo = 2; // const VkImageMemoryRequirementsInfo2* pInfo
  VkMemoryRequirements2 pMemoryRequirements = 3; // VkMemoryRequirements2* pMemoryRequirements NON-CONST POINTER
}


